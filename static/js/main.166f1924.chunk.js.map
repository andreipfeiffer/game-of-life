{"version":3,"sources":["utils.ts","Life.tsx","App.tsx","hooks.ts","index.tsx","presets.ts"],"names":["getInitialState","start","width","height","result","row","col","getNeighbors","grid","length","prevX","nextX","prevY","nextY","Life","props","population","onToggle","className","map","y","key","cell","x","alive","onClick","renderCell","renderRow","App","presets","React","useState","play","setPlay","lifetime","setLifetime","setWidth","setHeight","id","preset","setPreset","setPopulation","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","useInterval","next","isAlive","filter","getNextPopulation","value","onChange","e","newPreset","find","p","loadPreset","target","description","type","maxLength","newWidth","newHeight","console","log","JSON","stringify","newRow","newPopulation","slice","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.166f1924.chunk.js","sourcesContent":["import { Grid } from \"./types\";\n\nexport function getInitialState(\n  start: Array<Array<any>>,\n  width: number,\n  height: number\n): Grid {\n  const result: Grid = [];\n\n  for (let row = 0; row < height; row += 1) {\n    result[row] = [];\n\n    for (let col = 0; col < width; col += 1) {\n      result[row][col] = !!start?.[row]?.[col];\n    }\n  }\n\n  return result;\n}\n\nexport function getNextPopulation(grid: Array<Array<any>>): Grid {\n  const next: Grid = [];\n\n  for (let row = 0; row < grid.length; row += 1) {\n    next[row] = [];\n\n    for (let col = 0; col < grid[row].length; col += 1) {\n      const isAlive = !!grid[row][col];\n      const neighbors = getNeighbors(grid, row, col);\n      const alive = neighbors.filter((cell) => !!cell);\n\n      if (alive.length === 3) {\n        next[row][col] = true;\n      } else if (alive.length === 2 && isAlive) {\n        next[row][col] = true;\n      } else {\n        next[row][col] = false;\n      }\n    }\n  }\n\n  return next;\n}\n\nexport function getNeighbors(\n  grid: Array<Array<any>>,\n  row: number,\n  col: number\n): Array<any> {\n  const height = grid.length;\n  const width = grid[0].length;\n\n  const prevX = col > 0 ? col - 1 : width - 1;\n  const nextX = col < width - 1 ? col + 1 : 0;\n\n  const prevY = row > 0 ? row - 1 : height - 1;\n  const nextY = row < height - 1 ? row + 1 : 0;\n\n  return [\n    grid[prevY][prevX], // top left\n    grid[prevY][col], // top\n    grid[prevY][nextX], // top right\n    grid[row][prevX], // left\n    grid[row][nextX], // right\n    grid[nextY][prevX], // bottom left\n    grid[nextY][col], // bottom\n    grid[nextY][nextX], // bottom right\n  ];\n}\n","import React from \"react\";\nimport { Grid } from \"./types\";\nimport \"./Life.css\";\n\ninterface Props {\n  population: Grid;\n  onToggle(x: number, y: number): void;\n}\n\nfunction Life(props: Props) {\n  const { population, onToggle } = props;\n\n  return (\n    <table className=\"life\">\n      <tbody>{population.map((row, y) => renderRow(row, y))}</tbody>\n    </table>\n  );\n\n  function renderRow(row: boolean[], y: number) {\n    return <tr key={y}>{row.map((cell, x) => renderCell(cell, x, y))}</tr>;\n  }\n\n  function renderCell(alive: boolean, x: number, y: number) {\n    return (\n      <td\n        key={`${y}${x}`}\n        className={`cell${alive ? \" cell-alive\" : \"\"}`}\n        onClick={() => onToggle(x, y)}\n      ></td>\n    );\n  }\n}\n\nexport default Life;\n","import React from \"react\";\nimport \"./App.css\";\nimport { Grid, Preset } from \"./types\";\nimport { getInitialState, getNextPopulation } from \"./utils\";\nimport { useInterval } from \"./hooks\";\nimport Life from \"./Life\";\n\ninterface Props {\n  presets: Preset[];\n}\n\nfunction App(props: Props) {\n  const { presets } = props;\n\n  const [play, setPlay] = React.useState(true);\n  const [lifetime, setLifetime] = React.useState(500);\n  const [width, setWidth] = React.useState(presets[0].grid[0].length);\n  const [height, setHeight] = React.useState(presets[0].grid.length);\n  const [preset, setPreset] = React.useState(presets[0].id);\n  const [population, setPopulation] = React.useState<Grid>(\n    getInitialState(presets[0].grid, width, height)\n  );\n\n  useInterval(tick, play ? lifetime : null);\n\n  return (\n    <div>\n      Preset:{\" \"}\n      <select value={preset} onChange={(e) => loadPreset(e.target.value)}>\n        <option value=\"\">Select a preset</option>\n        {presets.map((preset) => (\n          <option key={preset.id} value={preset.id}>\n            {preset.description}\n          </option>\n        ))}\n      </select>\n      <br />\n      <br />\n      Cycle :{\" \"}\n      <input\n        type=\"number\"\n        value={lifetime}\n        onChange={(e) => setLifetime(+e.target.value)}\n        maxLength={4}\n        className=\"input\"\n      />{\" \"}\n      Width:{\" \"}\n      <input\n        type=\"number\"\n        value={width}\n        onChange={(e) => updateWidth(+e.target.value)}\n        maxLength={3}\n        className=\"input\"\n      />{\" \"}\n      Height:{\" \"}\n      <input\n        type=\"number\"\n        value={height}\n        onChange={(e) => updateHeight(+e.target.value)}\n        maxLength={3}\n        className=\"input\"\n      />{\" \"}\n      <br />\n      <br />\n      <button onClick={() => setPlay(!play)}>\n        {play ? \"Stop\" : \"Play\"}\n      </button>{\" \"}\n      {play === false && (\n        <button onClick={output} className=\"secondary\">\n          Output\n        </button>\n      )}{\" \"}\n      <hr />\n      <div className={`${play ? \"playing\" : \"\"}`}>\n        <Life population={population} onToggle={toggleCell} />\n      </div>\n    </div>\n  );\n\n  function tick() {\n    setPopulation(getNextPopulation(population));\n  }\n\n  function updateWidth(newWidth: number) {\n    setWidth(newWidth);\n    setPreset(\"\");\n    setPopulation(getInitialState(population, newWidth, height));\n  }\n\n  function updateHeight(newHeight: number) {\n    setHeight(newHeight);\n    setPreset(\"\");\n    setPopulation(getInitialState(population, width, newHeight));\n  }\n\n  function loadPreset(id: string) {\n    const newPreset = presets.find((p) => p.id === id);\n    setHeight(newPreset?.height || height);\n    setWidth(newPreset?.width || width);\n    setPopulation(newPreset?.grid || population);\n    setPreset(id);\n  }\n\n  function toggleCell(x: number, y: number) {\n    if (play) {\n      return;\n    }\n\n    const newRow = [...population[y]];\n    newRow[x] = !newRow[x];\n    const newPopulation = [\n      ...population.slice(0, y),\n      newRow,\n      ...population.slice(y + 1),\n    ];\n\n    setPopulation(newPopulation);\n    setPreset(\"\");\n  }\n\n  function output() {\n    console.log(JSON.stringify(population));\n  }\n}\n\nexport default App;\n","import React from \"react\";\n\nexport function useInterval(callback: Function, delay: number | null) {\n  const savedCallback = React.useRef() as React.MutableRefObject<Function>;\n\n  // Remember the latest function.\n  React.useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback, savedCallback]);\n\n  // Set up the interval.\n  React.useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay, savedCallback]);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport { getPresets } from \"./presets\";\n\nconst presets = getPresets();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App presets={presets} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { Preset } from \"./types\";\n\nexport function getPresets(): Preset[] {\n  return [\n    {\n      id: \"block\",\n      description: \"Block (Still life)\",\n      width: 4,\n      height: 4,\n      grid: [\n        [false, false, false, false],\n        [false, true, true, false],\n        [false, true, true, false],\n        [false, false, false, false],\n      ],\n    },\n    {\n      id: \"blinker\",\n      description: \"Blinker (period 2 Oscillator)\",\n      width: 5,\n      height: 5,\n      grid: [\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n        [false, true, true, true, false],\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n      ],\n    },\n    {\n      id: \"toad\",\n      description: \"Toad (period 2 Oscillator)\",\n      width: 6,\n      height: 6,\n      grid: [\n        [false, false, false, false, false, false],\n        [false, false, false, false, false, false],\n        [false, false, true, true, true, false],\n        [false, true, true, true, false, false],\n        [false, false, false, false, false, false],\n        [false, false, false, false, false, false],\n      ],\n    },\n    {\n      id: \"glider\",\n      description: \"Glider (Spaceship)\",\n      width: 5,\n      height: 5,\n      grid: [\n        [false, false, false, false, false],\n        [false, false, true, false, false],\n        [false, false, false, true, false],\n        [false, true, true, true, false],\n        [false, false, false, false, false],\n      ],\n    },\n  ];\n}\n"],"sourceRoot":""}